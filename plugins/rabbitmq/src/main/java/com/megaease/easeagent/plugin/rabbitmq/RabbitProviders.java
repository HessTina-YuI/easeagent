/*
 * Copyright (c) 2021, MegaEase
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.megaease.easeagent.plugin.rabbitmq;

import com.megaease.easeagent.plugin.Interceptor;
import com.megaease.easeagent.plugin.Provider;
import com.megaease.easeagent.plugin.annotation.ProviderBean;
import com.megaease.easeagent.plugin.rabbitmq.spring.RabbitMqMessageListenerAdvice;
import com.megaease.easeagent.plugin.rabbitmq.spring.RabbitMqMessageListenerOnMessageInterceptor;
import com.megaease.easeagent.plugin.rabbitmq.v5.advice.RabbitMqChannelAdvice;
import com.megaease.easeagent.plugin.rabbitmq.v5.advice.RabbitMqConsumerAdvice;
import com.megaease.easeagent.plugin.rabbitmq.v5.interceptor.RabbitMqChannelConsumeInterceptor;
import com.megaease.easeagent.plugin.rabbitmq.v5.interceptor.RabbitMqChannelPublishInterceptor;
import com.megaease.easeagent.plugin.rabbitmq.v5.interceptor.RabbitMqConsumerHandleDeliveryInterceptor;

import java.util.function.Supplier;

/**
 *  for test temporarily, provider-classes will be generated by annotation processor
 */
public class RabbitProviders {
    @ProviderBean
    public static class RabbitMqMessageListenerOnMessageProvider implements Provider {
        @Override
        public Supplier<Interceptor> getInterceptorProvider() {
            return RabbitMqMessageListenerOnMessageInterceptor::new;
        }

        @Override
        public String getAdviceTo() {
            return RabbitMqMessageListenerAdvice.class.getCanonicalName()
                + ":default";
        }

        @Override
        public String getPluginClassName() {
            return RabbitMqPlugin.class.getCanonicalName();
        }
    }

    @ProviderBean
    public static class RabbitMqChannelConsumeInterceptorProvider implements Provider {
        @Override
        public Supplier<Interceptor> getInterceptorProvider() {
            return RabbitMqChannelConsumeInterceptor::new;
        }

        @Override
        public String getAdviceTo() {
            return RabbitMqChannelAdvice.class.getCanonicalName()
                + ":basicConsume";
        }

        @Override
        public String getPluginClassName() {
            return RabbitMqPlugin.class.getCanonicalName();
        }
    }

    @ProviderBean
    public static class RabbitMqChannelPublishInterceptorProvider implements Provider {
        @Override
        public Supplier<Interceptor> getInterceptorProvider() {
            return RabbitMqChannelPublishInterceptor::new;
        }

        @Override
        public String getAdviceTo() {
            return RabbitMqChannelAdvice.class.getCanonicalName()
                + ":basicPublish";
        }

        @Override
        public String getPluginClassName() {
            return RabbitMqPlugin.class.getCanonicalName();
        }
    }

    @ProviderBean
    public static class RabbitMqConsumerHandleDeliveryInterceptorProvider implements Provider {
        @Override
        public Supplier<Interceptor> getInterceptorProvider() {
            return RabbitMqConsumerHandleDeliveryInterceptor::new;
        }

        @Override
        public String getAdviceTo() {
            return RabbitMqConsumerAdvice.class.getCanonicalName()
                + ":default";
        }

        @Override
        public String getPluginClassName() {
            return RabbitMqPlugin.class.getCanonicalName();
        }
    }
}
